import sqlite3
import asyncio
import logging
import os
import re
from datetime import datetime, timedelta
from typing import List

from aiogram import Bot, Dispatcher, types
from aiogram.types import (ParseMode, BotCommand, ReplyKeyboardMarkup, 
                          KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiohttp import web

import csv
import io
from aiogram.types import InputFile

from aiogram.utils import exceptions
from aiogram.types import ChatMemberUpdated, ChatType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('apibotkey')
DB_PATH = "/bd1/tasks.db"

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ALLOWED_USERS: List[str] = []  

def update_allowed_users(conn):
    global ALLOWED_USERS
    cursor = conn.cursor()
    cursor.execute('SELECT CAST(tg_user_id as INT) FROM users')
    ALLOWED_USERS = [row[0] for row in cursor.fetchall()]

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏)
ADMIN_ID = int(os.getenv('admin'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS tasks (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id TEXT,
                        chat_id INTEGER,
                        task_text TEXT,
                        status TEXT DEFAULT '–Ω–æ–≤–∞—è',
                        deadline TEXT)
                        ''')
        conn.commit()

        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        tg_user_id TEXT PRIMARY KEY)
                        ''')
        conn.commit()
      
        return conn
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

conn = init_db()
update_allowed_users(conn)

# ======================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –ò –ò–ù–¢–ï–†–§–ï–ô–°
# ======================

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add(
    KeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"),
    KeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞"),
    KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
    KeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"),
    KeyboardButton("‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫"),
    KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"),
    KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á"),
    KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç (—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏)")
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
group_menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
group_menu_keyboard.add(
    KeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"),
    KeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞"),
    KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á")
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def get_deadline_keyboard(with_none_option=False):
    today = datetime.today()
    dates = {
        "–°–µ–≥–æ–¥–Ω—è": today.strftime("%Y-%m-%d"),
        "–ó–∞–≤—Ç—Ä–∞": (today + timedelta(days=1)).strftime("%Y-%m-%d"),
        "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": (today + timedelta(days=2)).strftime("%Y-%m-%d"),
    }

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if with_none_option:
        dates["‚ùå –ë–µ–∑ —Å—Ä–æ–∫–∞"] = "set_deadline_none"
    dates["–°–≤–æ–π —Å—Ä–æ–∫"] = "set_deadline_custom"

    keyboard = InlineKeyboardMarkup(row_width=3)  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä–∞–º–∏
    buttons = []
    for label, date in dates.items():
        if label == "‚ùå –ë–µ–∑ —Å—Ä–æ–∫–∞" or label == "–°–≤–æ–π —Å—Ä–æ–∫":
            buttons.append(InlineKeyboardButton(label, callback_data=date))  # –¥–ª—è —ç—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫ callback_data = date
        else:
            buttons.append(InlineKeyboardButton(label, callback_data=f"set_deadline_{date}"))  # –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –≤ —Ñ–æ—Ä–º–∞—Ç–µ f"set_deadline_{date}"

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 3):
        row = buttons[i:i+3]
        keyboard.row(*row)

    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
def get_status_keyboard(task_id):
    keyboard = InlineKeyboardMarkup(row_width=3)
    statuses = ["–Ω–æ–≤–∞—è", "–≤ —Ä–∞–±–æ—Ç–µ", "–æ–∂–∏–¥–∞–µ—Ç –¥–æ–∫–ª–∞–¥–∞", "–∏—Å–ø–æ–ª–Ω–µ–Ω–æ", "—É–¥–∞–ª–µ–Ω–æ"]
    buttons = [InlineKeyboardButton(status, callback_data=f"set_status_{task_id}_{status}") for status in statuses]
    keyboard.add(*buttons)
    return keyboard

# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ======================

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="/newtask", description="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"),
        BotCommand(command="/quicktask", description="–ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞"),
        BotCommand(command="/setstatus", description="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
        BotCommand(command="/setexecutor", description="–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"),
        BotCommand(command="/setdeadline", description="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫"),
        BotCommand(command="/listtasks", description="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"),
        BotCommand(command="/export", description="–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"),
        BotCommand(command="/export2", description="–≠–∫—Å–ø–æ—Ä—Ç —Å –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏"),
        BotCommand(command="/start", description="–°—Ç–∞—Ä—Ç –±–æ—Ç–∞"),
        BotCommand(command="/myid", description="–£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID"),
        BotCommand(command="/export3", description="–ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç (–∞–¥–º–∏–Ω)"),
        BotCommand(command="/deletetask", description="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (–∞–¥–º–∏–Ω)"),
        BotCommand(command="/adduser", description="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)")
    ]
    await bot.set_my_commands(commands)

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS and message.from_user.id != ADMIN_ID:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    if message.chat.type == "private":
        await bot.send_message(chat_id=message.chat.id, text=
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
            reply_markup=menu_keyboard
        )
    else:
        await bot.send_message(chat_id=message.chat.id, text=
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
            reply_markup=group_menu_keyboard
        )

# –ö–æ–º–∞–Ω–¥—ã –≤—ã–∑—ã–≤–∞—é—Ç —Ç–µ –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∏
@dp.message_handler(commands=["newtask"])
async def cmd_new_task(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return  
    await new_task_start(message)  # –¢–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"

@dp.message_handler(commands=["quicktask"])
async def cmd_new_task(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return  
    await quick_task_start(message)  # –¢–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞"

@dp.message_handler(commands=["setstatus"])
async def cmd_set_status(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return  
    if message.chat.type != "private":
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –ú–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –õ–°")
        return
    await status_select_task(message)  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"

@dp.message_handler(commands=["setexecutor"])
async def cmd_set_executor(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    if message.chat.type != "private":
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –ú–µ–Ω—è—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –õ–°")
        return
    await executor_select_task(message)  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"

@dp.message_handler(commands=["setdeadline"])
async def cmd_set_deadline(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return  
    if message.chat.type != "private":
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –ú–µ–Ω—è—Ç—å —Å—Ä–æ–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –õ–°")
        return
    await deadline_select_task(message)  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ "‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫"

@dp.message_handler(commands=["listtasks"])
async def cmd_list_tasks(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return  
    await list_tasks(message)  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"

@dp.message_handler(commands=["export"])
async def cmd_export_tasks(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return  
    await export_tasks_to_csv(message)  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ "üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á"

@dp.message_handler(commands=["export2"])
async def cmd_export_tasks(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return  
    await export_tasks_to_csv2(message)  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ "üì§ –≠–∫—Å–ø–æ—Ä—Ç (—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏)"

# ======================
# –°–û–°–¢–û–Ø–ù–ò–Ø –ë–û–¢–ê
# ======================

class TaskCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_executor = State()
    waiting_for_deadline = State()

class TaskDeletion(StatesGroup):
    waiting_for_task_selection = State()
    waiting_for_confirmation = State()
    waiting_for_manual_id = State()

# ======================
# –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß
# ======================

@dp.message_handler(lambda message: message.text == "‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
async def new_task_start(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return  
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é"""
    await bot.send_message(chat_id=message.from_user.id, text="üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await TaskCreation.waiting_for_title.set()

@dp.message_handler(state=TaskCreation.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await state.update_data(title = message.text if message.text else message.caption if message.caption else message.forward_from_message.caption if message.forward_from_message else None)
    await bot.send_message(chat_id=message.from_user.id, text="üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (@username):")
    await TaskCreation.waiting_for_executor.set()

@dp.message_handler(state=TaskCreation.waiting_for_executor)
async def process_executor(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏"""
    executor = message.text.strip()

    await state.update_data(executor=executor)
    await bot.send_message(chat_id=message.chat.id, text=
        "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:",
        reply_markup=get_deadline_keyboard(with_none_option=True)
    )
    await TaskCreation.waiting_for_deadline.set()

@dp.callback_query_handler(lambda c: c.data.startswith("set_deadline_"), state=TaskCreation.waiting_for_deadline)
async def process_deadline(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
    if callback_query.data == "set_deadline_custom":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º callback_query –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(callback_query=callback_query)
        await bot.send_message(chat_id=callback_query.from_user.id, text="‚è≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        return
    elif callback_query.data == "set_deadline_none":
        await save_task(callback_query, state, deadline=None)
    else:
        deadline = callback_query.data.split("_")[2]
        await save_task(callback_query, state, deadline)

@dp.message_handler(state=TaskCreation.waiting_for_deadline)
async def process_custom_deadline(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞"""
    try:
        datetime.strptime(message.text, "%Y-%m-%d")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π callback_query –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        callback_query = user_data.get('callback_query')
        
        if callback_query:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_query –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            await save_task(callback_query, state, message.text.strip())
        else:
            # –ï—Å–ª–∏ callback_query –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º message
            await save_task(message, state, message.text.strip())
            
    except ValueError:
        await bot.send_message(chat_id=message.from_user.id, text="‚ö† –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.")

async def save_task(message_obj, state: FSMContext, deadline: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ë–î"""
    user_data = await state.get_data()
    task_text = user_data['title']
    executor = user_data['executor']

    try:
        # –ü–æ–ª—É—á–∞–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ message_obj
        if isinstance(message_obj, types.CallbackQuery):
            chat_id = message_obj.from_user.id
        else:  # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (types.Message)
            chat_id = message_obj.chat.id

        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO tasks (user_id, chat_id, task_text, deadline) VALUES (?, ?, ?, ?)",
            (executor, chat_id, task_text, deadline)
        )
        conn.commit()

        response = (
            f"üìå <b>{task_text}</b>\n"
            f"üë§ {executor} "
        )
        if deadline:
            response += f"‚è≥ {deadline}"
        else:
            response += "‚è≥ –ë–µ–∑ —Å—Ä–æ–∫–∞"
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ message_obj
        if isinstance(message_obj, types.CallbackQuery):
            await bot.send_message(chat_id=message_obj.from_user.id, text=response, parse_mode=ParseMode.HTML)
        else:
            await bot.send_message(chat_id=message_obj.from_user.id, text=response, parse_mode=ParseMode.HTML)
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        reply_target = message_obj.message if isinstance(message_obj, types.CallbackQuery) else message_obj
        await reply_target.reply(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
    finally:
        await state.finish()

# ======================
# –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß–ò –ò–ó –û–î–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
# ======================

def parse_deadline(deadline_str: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD"""
    today = datetime.today()
    weekday_map = {
        '–ø–Ω': 0, '–ø–æ–Ω': 0, '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0,
        '–≤—Ç': 1, '–≤—Ç–æ': 1, '–≤—Ç–æ—Ä–Ω–∏–∫': 1,
        '—Å—Ä': 2, '—Å—Ä–µ': 2, '—Å—Ä–µ–¥–∞': 2,
        '—á—Ç': 3, '—á–µ—Ç': 3, '—á–µ—Ç–≤–µ—Ä–≥': 3,
        '–ø—Ç': 4, '–ø—è—Ç': 4, '–ø—è—Ç–Ω–∏—Ü–∞': 4,
        '—Å–±': 5, '—Å—É–±': 5, '—Å—É–±–±–æ—Ç–∞': 5,
        '–≤—Å': 6, '–≤–æ—Å': 6, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
    }
    
    lower_str = deadline_str.lower()
    
    if lower_str == '—Å–µ–≥–æ–¥–Ω—è':
        return today.strftime("%Y-%m-%d")
    
    if lower_str == '–∑–∞–≤—Ç—Ä–∞':
        return (today + timedelta(days=1)).strftime("%Y-%m-%d")
    
    if lower_str in weekday_map:
        target_weekday = weekday_map[lower_str]
        current_weekday = today.weekday()
        
        days_ahead = target_weekday - current_weekday
        if days_ahead <= 0:
            days_ahead += 7
            
        return (today + timedelta(days=days_ahead)).strftime("%Y-%m-%d")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    try:
        datetime.strptime(deadline_str, "%Y-%m-%d")
        return deadline_str
    except ValueError:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {deadline_str}")


class QuickTaskCreation(StatesGroup):
    waiting_for_full_data = State()

@dp.message_handler(lambda message: message.text == "‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞")
async def quick_task_start(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    """–ù–∞—á–∞–ª–æ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await bot.send_message(chat_id=message.from_user.id, text=
        "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ @–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å /—Å—Ä–æ–∫"
    )
    await QuickTaskCreation.waiting_for_full_data.set()

@dp.message_handler(state=QuickTaskCreation.waiting_for_full_data,
                    content_types=types.ContentType.ANY)
async def process_quick_task(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        text = message.text if message.text else message.caption if message.caption else message.forward_from_message.caption if message.forward_from_message else None
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        task_match = re.search(r'^(.*?)(\s@|$)', text)
        executor_match = re.search(r'@(\S+)', text)
        deadline_match = re.search(r'/(\S+)', text)
        deadline_raw = deadline_match.group(1) if deadline_match else None

        task_text = task_match.group(1).strip() if task_match else None
        executor = executor_match.group(0) if executor_match else None
        deadline = deadline_match.group(1) if deadline_match else None

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
        if not task_text:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        deadline_raw = deadline_match.group(1) if deadline_match else None
        deadline = None
        if deadline_raw:
            try:
                deadline = parse_deadline(deadline_raw)
            except ValueError as e:
                raise ValueError(f"–û—à–∏–±–∫–∞ –≤ —Å—Ä–æ–∫–µ: {str(e)}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO tasks (user_id, chat_id, task_text, deadline) VALUES (?, ?, ?, ?)",
            (executor, message.from_user.id, task_text, deadline)
        )
        conn.commit()

        response = (
            f"üìå <b>{task_text}</b>\n"
            f"üë§ {executor if executor else '–Ω–µ —É–∫–∞–∑–∞–Ω'} ‚è≥ {deadline if deadline else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )
        await bot.send_message(chat_id=message.from_user.id, text=response)

    except ValueError as e:
        await bot.send_message(chat_id=message.from_user.id,text=f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        await bot.send_message(chat_id=message.from_user.id, text="‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await bot.send_message(chat_id=message.from_user.id, text="‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    finally:
        await state.finish()

# ======================
# –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê
# ======================

class StatusUpdate(StatesGroup):
    waiting_for_executor = State()
    waiting_for_task_selection = State()
    waiting_for_status_choice = State()

@dp.message_handler(lambda message: message.text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def status_select_task(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return  
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    cursor = conn.cursor()
    cursor.execute("""
        SELECT DISTINCT user_id FROM tasks 
        WHERE status<>'—É–¥–∞–ª–µ–Ω–æ'
        LIMIT 20
    """)
    
    executors = cursor.fetchall()
    
    if not executors:
        await message.reply("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
        return

    keyboard = InlineKeyboardMarkup(row_width=2)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 2
    for i in range(0, len(executors), 2):
        row = executors[i:i+2]  # –ë–µ—Ä–µ–º –≥—Ä—É–ø–ø—É –∏–∑ 2 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        row_buttons = [
            InlineKeyboardButton(
                f"üë§ {executor[0] if executor[0] else '–ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'}",
                callback_data=f"executor_for_status|{executor[0]}"
            ) for executor in row
        ]
        keyboard.add(*row_buttons)  # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ ID –≤—Ä—É—á–Ω—É—é
    keyboard.add(InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ ID –∑–∞–¥–∞—á–∏ –≤—Ä—É—á–Ω—É—é", callback_data="status_manual_id"))
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á:", reply_markup=keyboard)
    await StatusUpdate.waiting_for_executor.set()

@dp.callback_query_handler(lambda c: c.data.startswith("executor_for_status|"), state=StatusUpdate.waiting_for_executor)
async def process_executor_selection(callback_query: types.CallbackQuery, state: FSMContext):
    executor = callback_query.data.split("|")[-1]
    await state.update_data(executor=executor)
    await show_filtered_tasks(callback_query.message, executor)
    await StatusUpdate.waiting_for_task_selection.set()

async def show_filtered_tasks(message_obj, executor):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    try:
        cursor = conn.cursor()
        if executor.lower() == "none":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—â–µ–º –ª–∏ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            cursor.execute("""
                SELECT id, task_text, status 
                FROM tasks
                WHERE user_id IS NULL AND status NOT IN ('—É–¥–∞–ª–µ–Ω–æ', '–∏—Å–ø–æ–ª–Ω–µ–Ω–æ')
                ORDER BY id DESC 
                LIMIT 20
            """)
        else:
            cursor.execute("""
                SELECT id, task_text, status 
                FROM tasks
                WHERE user_id = ? AND status NOT IN ('—É–¥–∞–ª–µ–Ω–æ', '–∏—Å–ø–æ–ª–Ω–µ–Ω–æ')
                ORDER BY id DESC 
                LIMIT 20
            """, (executor,))
        
        tasks = cursor.fetchall()

        keyboard = InlineKeyboardMarkup(row_width=1)
        for task_id, task_text, status in tasks:
            keyboard.add(InlineKeyboardButton(
                f"{task_text[:30]}... (üîπ: {task_id}, üîÑ: {status})", 
                callback_data=f"status_task_{task_id}"
            ))
        
        keyboard.add(InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é", callback_data="status_manual_id"))
        
        await bot.send_message(
            chat_id=message_obj.chat.id,
            text=f"–ó–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {executor}:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        await bot.send_message(chat_id=message_obj.chat.id, text="‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á")

@dp.callback_query_handler(lambda c: c.data.startswith("status_task_"), state=StatusUpdate.waiting_for_task_selection)
async def process_selected_task_status(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    task_id = callback_query.data.split("_")[2]  # –§–æ—Ä–º–∞—Ç: status_task_123
    await state.update_data(task_id=task_id)
    await show_status_options(callback_query.message, task_id)  # –ü–µ—Ä–µ–¥–∞–µ–º task_id
    await StatusUpdate.waiting_for_status_choice.set()

@dp.callback_query_handler(lambda c: c.data == "status_manual_id", state=[StatusUpdate.waiting_for_executor, StatusUpdate.waiting_for_task_selection])
async def ask_for_manual_id_status(callback_query: types.CallbackQuery):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ"""
    await bot.send_message(chat_id=callback_query.from_user.id, text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏:")
    await StatusUpdate.waiting_for_task_selection.set()

@dp.message_handler(state=StatusUpdate.waiting_for_task_selection)
async def process_manual_task_id_status(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        task_id = int(message.text)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM tasks WHERE id=?", (task_id,))
        if not cursor.fetchone():
            await bot.send_message(chat_id=message.from_user.id, text="‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            await state.finish()
            return
        
        await state.update_data(task_id=task_id)
        await show_status_options(message, task_id)  # –ü–µ—Ä–µ–¥–∞–µ–º task_id
        await StatusUpdate.waiting_for_status_choice.set()
    except ValueError:
        await bot.send_message(chat_id=message.from_user.id, text="‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–¥–∞—á–∏!")
        await state.finish()

async def show_status_options(message_obj, task_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤"""
    keyboard = InlineKeyboardMarkup(row_width=3)
    statuses = ["–Ω–æ–≤–∞—è", "–≤ —Ä–∞–±–æ—Ç–µ", "–æ–∂–∏–¥–∞–µ—Ç –¥–æ–∫–ª–∞–¥–∞", "–∏—Å–ø–æ–ª–Ω–µ–Ω–æ", "—É–¥–∞–ª–µ–Ω–æ"]
    buttons = [InlineKeyboardButton(
        status, 
        callback_data=f"set_status_{task_id}_{status}"
    ) for status in statuses]
    keyboard.add(*buttons)
    await bot.send_message(chat_id=message_obj.chat.id, text="üìå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("set_status_"), state=StatusUpdate.waiting_for_status_choice)
async def process_status_update(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º task_id –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
        _, _, task_id, new_status = callback_query.data.split("_")
        
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET status=? WHERE id=?", (new_status, task_id))
        conn.commit()
        
        await bot.send_message(chat_id=callback_query.from_user.id, text=f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
        await state.finish()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await bot.send_message(chat_id=callback_query.from_user.id, text="‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        await state.finish()

# ======================
# –ò–ó–ú–ï–ù–ï–ù–ò–ï –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø
# ======================

class ExecutorUpdate(StatesGroup):
    waiting_for_executor = State()
    waiting_for_task_selection = State()
    waiting_for_new_executor = State()

@dp.message_handler(lambda message: message.text == "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
async def executor_select_task(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT user_id FROM tasks WHERE status<>'—É–¥–∞–ª–µ–Ω–æ' LIMIT 20")
    executors = cursor.fetchall()
    
    if not executors:
        await message.reply("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    for i in range(0, len(executors), 2):
        row = executors[i:i+2]
        row_buttons = [
            InlineKeyboardButton(
                f"üë§ {executor[0] if executor[0] else '–ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'}",
                callback_data=f"executor_filter|{executor[0]}"
            ) for executor in row
        ]
        keyboard.add(*row_buttons)
    
    keyboard.add(InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ ID –∑–∞–¥–∞—á–∏", callback_data="executor_manual_id"))
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á:", reply_markup=keyboard)
    await ExecutorUpdate.waiting_for_executor.set()

@dp.callback_query_handler(lambda c: c.data.startswith("executor_filter|"), state=ExecutorUpdate.waiting_for_executor)
async def process_executor_filter(callback_query: types.CallbackQuery, state: FSMContext):
    executor = callback_query.data.split("|")[-1]
    await state.update_data(executor=executor)
    await show_executor_tasks(callback_query.message, executor)
    await ExecutorUpdate.waiting_for_task_selection.set()

async def show_executor_tasks(message_obj, executor):
    try:
        cursor = conn.cursor()
        if executor.lower() == "none":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—â–µ–º –ª–∏ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            cursor.execute("""
                SELECT id, task_text, status 
                FROM tasks
                WHERE user_id IS NULL AND status NOT IN ('—É–¥–∞–ª–µ–Ω–æ', '–∏—Å–ø–æ–ª–Ω–µ–Ω–æ')
                ORDER BY id DESC 
                LIMIT 20
            """)
        else:
            cursor.execute("""
                SELECT id, task_text, status 
                FROM tasks
                WHERE user_id = ? AND status NOT IN ('—É–¥–∞–ª–µ–Ω–æ', '–∏—Å–ø–æ–ª–Ω–µ–Ω–æ')
                ORDER BY id DESC 
                LIMIT 20
            """, (executor,))
        
        tasks = cursor.fetchall()

        keyboard = InlineKeyboardMarkup(row_width=1)
        for task_id, task_text, current_executor in tasks:
            keyboard.add(InlineKeyboardButton(
                f"{task_text[:30]}... (ID: {task_id})", 
                callback_data=f"executor_task_{task_id}"
            ))

        keyboard.add(InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é", callback_data="executor_manual_id"))
        await bot.send_message(
            chat_id=message_obj.chat.id,
            text=f"–ó–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {executor}:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith("executor_task_"), state=ExecutorUpdate.waiting_for_task_selection)
async def process_selected_task_executor(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = callback_query.data.split("_")[2]
    await state.update_data(task_id=task_id)
    await bot.send_message(chat_id=callback_query.from_user.id, text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (@username –∏–ª–∏ user_id):")
    await ExecutorUpdate.waiting_for_new_executor.set()

@dp.callback_query_handler(
    lambda c: c.data == "executor_manual_id", 
    state=[ExecutorUpdate.waiting_for_executor, ExecutorUpdate.waiting_for_task_selection]  # –î–æ–±–∞–≤–∏—Ç—å –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
)
async def ask_for_manual_id_executor(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.from_user.id, text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏:")
    await ExecutorUpdate.waiting_for_task_selection.set()

@dp.message_handler(state=ExecutorUpdate.waiting_for_task_selection)
async def process_manual_task_id_executor(message: types.Message, state: FSMContext):
    try:
        task_id = int(message.text)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM tasks WHERE id=?", (task_id,))
        if not cursor.fetchone():
            await bot.send_message(chat_id=message.from_user.id, text="‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            await state.finish()
            return
        
        await state.update_data(task_id=task_id)
        await bot.send_message(chat_id=message.from_user.id, text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (@username –∏–ª–∏ user_id):")
        await ExecutorUpdate.waiting_for_new_executor.set()
    except ValueError:
        await bot.send_message(chat_id=message.from_user.id, text="‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–¥–∞—á–∏!")
        await state.finish()

@dp.message_handler(state=ExecutorUpdate.waiting_for_new_executor)
async def process_new_executor(message: types.Message, state: FSMContext):
    try:
        new_executor = message.text.strip()
        user_data = await state.get_data()
        task_id = user_data['task_id']

        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET user_id=? WHERE id=?", (new_executor, task_id))
        conn.commit()

        await bot.send_message(chat_id=message.from_user.id,text=f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á–∏ {task_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_executor}'")
        await state.finish()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
        await bot.send_message(chat_id=message.from_user.id, text="‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        await state.finish()

# ======================
# –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–†–û–ö–ê
# ======================

class TaskUpdate(StatesGroup):
    waiting_for_executor = State()
    waiting_for_task_selection = State()
    waiting_for_deadline_choice = State()
    waiting_for_custom_deadline = State()

@dp.message_handler(lambda message: message.text == "‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫")
async def deadline_select_task(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT user_id FROM tasks WHERE status<>'—É–¥–∞–ª–µ–Ω–æ' LIMIT 20")
    executors = cursor.fetchall()
    
    if not executors:
        await message.reply("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞")
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    for i in range(0, len(executors), 2):
        row = executors[i:i+2]
        row_buttons = [
            InlineKeyboardButton(
                f"üë§ {executor[0] if executor[0] else '–ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'}",
                callback_data=f"deadline_filter|{executor[0]}"
            ) for executor in row
        ]
        keyboard.add(*row_buttons)
    
    keyboard.add(InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ ID –∑–∞–¥–∞—á–∏", callback_data="deadline_manual_id"))
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á:", reply_markup=keyboard)
    await TaskUpdate.waiting_for_executor.set()

@dp.callback_query_handler(lambda c: c.data.startswith("deadline_filter|"), state=TaskUpdate.waiting_for_executor)
async def process_deadline_filter(callback_query: types.CallbackQuery, state: FSMContext):
    executor = callback_query.data.split("|")[-1]
    await state.update_data(executor=executor)
    await show_deadline_tasks(callback_query.message, executor)
    await TaskUpdate.waiting_for_task_selection.set()

async def show_deadline_tasks(message_obj, executor):
    try:
        cursor = conn.cursor()
        if executor.lower() == "none":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—â–µ–º –ª–∏ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            cursor.execute("""
                SELECT id, task_text, status 
                FROM tasks
                WHERE user_id IS NULL AND status NOT IN ('—É–¥–∞–ª–µ–Ω–æ', '–∏—Å–ø–æ–ª–Ω–µ–Ω–æ')
                ORDER BY id DESC 
                LIMIT 20
            """)
        else:
            cursor.execute("""
                SELECT id, task_text, status 
                FROM tasks
                WHERE user_id = ? AND status NOT IN ('—É–¥–∞–ª–µ–Ω–æ', '–∏—Å–ø–æ–ª–Ω–µ–Ω–æ')
                ORDER BY id DESC 
                LIMIT 20
            """, (executor,))
        
        tasks = cursor.fetchall()

        keyboard = InlineKeyboardMarkup(row_width=1)
        for task_id, task_text, deadline in tasks:
            keyboard.add(InlineKeyboardButton(
                f"{task_text[:30]}... (ID: {task_id})", 
                callback_data=f"deadline_task_{task_id}"
            ))

        keyboard.add(InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é", callback_data="deadline_manual_id"))
        await bot.send_message(
            chat_id=message_obj.chat.id,
            text=f"–ó–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {executor}:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith("deadline_task_"), state=TaskUpdate.waiting_for_task_selection)
async def process_selected_task(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    task_id = callback_query.data.split("_")[-1]
    await state.update_data(task_id=task_id)
    await show_deadline_options(callback_query.message)
    await TaskUpdate.waiting_for_deadline_choice.set()

@dp.callback_query_handler(
    lambda c: c.data == "deadline_manual_id", 
    state=[TaskUpdate.waiting_for_executor, TaskUpdate.waiting_for_task_selection]  # –î–æ–±–∞–≤–∏—Ç—å –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
)
async def ask_for_manual_id(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.from_user.id, text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏:")
    await TaskUpdate.waiting_for_task_selection.set()

@dp.message_handler(state=TaskUpdate.waiting_for_task_selection)
async def process_manual_task_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏"""
    try:
        task_id = int(message.text)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM tasks WHERE id=?", (task_id,))
        if not cursor.fetchone():
            await bot.send_message(chat_id=message.from_user.id, text="‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        await state.update_data(task_id=task_id)
        await show_deadline_options(message)
        await TaskUpdate.waiting_for_deadline_choice.set()
    except ValueError:
        await bot.send_message(chat_id=message.from_user.id, text="‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–¥–∞—á–∏!")
        await state.finish()

async def show_deadline_options(message_obj):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞"""
    keyboard = get_deadline_keyboard(with_none_option=True)
    await bot.send_message(chat_id=message_obj.chat.id, text="‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("set_deadline_"), state=TaskUpdate.waiting_for_deadline_choice)
async def process_deadline_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ä–æ–∫–∞"""
    if callback_query.data == "set_deadline_custom":
        await bot.send_message(chat_id=callback_query.from_user.id, text="üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        await TaskUpdate.waiting_for_custom_deadline.set()
    else:
        user_data = await state.get_data()
        task_id = user_data['task_id']
        
        if callback_query.data == "set_deadline_none":
            new_deadline = None
            response = "‚úÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω"
        else:
            new_deadline = callback_query.data.split("_")[2]
            response = f"‚úÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫: {new_deadline}"
        
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET deadline=? WHERE id=?", (new_deadline, task_id))
        conn.commit()
        
        await bot.send_message(chat_id=callback_query.from_user.id, text=response)
        await state.finish()

@dp.message_handler(state=TaskUpdate.waiting_for_custom_deadline)
async def process_custom_deadline(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        datetime.strptime(message.text, "%Y-%m-%d")
        new_deadline = message.text
        
        user_data = await state.get_data()
        task_id = user_data['task_id']
        
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET deadline=? WHERE id=?", (new_deadline, task_id))
        conn.commit()
        
        await bot.send_message(chat_id=message.from_user.id,text=f"‚úÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_deadline}")
        await state.finish()
    except ValueError:
        await bot.send_message(chat_id=message.from_user.id, text="‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")

# ======================
# –°–ü–ò–°–û–ö –ó–ê–î–ê–ß
# ======================

current_page = {}

@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def list_tasks(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return  
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å –≤—ã–±–æ—Ä–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT DISTINCT user_id FROM tasks 
            WHERE status NOT IN ('—É–¥–∞–ª–µ–Ω–æ', '–∏—Å–ø–æ–ª–Ω–µ–Ω–æ')
            LIMIT 20
        """)
        executors = cursor.fetchall()
        if not executors:
            await message.reply("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        keyboard = InlineKeyboardMarkup(row_width=2)
        for executor in executors:
            keyboard.add(InlineKeyboardButton(
                f"üë§ {executor[0] if executor[0] else '–ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'}",
                callback_data=f"listtasks_executor|{executor[0]}"
            ))
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {str(e)}")
        await bot.send_message(chat_id=message.from_user.id, text="‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")

@dp.callback_query_handler(lambda c: c.data.startswith("listtasks_executor|"))
async def process_listtasks_executor(callback_query: types.CallbackQuery):
    executor = callback_query.data.split("|")[1]
    user_id = callback_query.from_user.id
    current_page[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    sent_message = await show_tasks_page(callback_query.message, user_id, page=0, executor_filter=executor)
    current_page[f"{user_id}_message_id"] = sent_message.message_id
    await bot.answer_callback_query(callback_query.id)


async def show_tasks_page(message: types.Message, user_id: int, page: int, executor_filter: str = None):
    try:
        cursor = conn.cursor()
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é, –¥–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ
        if executor_filter.lower() == "none":
            cursor.execute("SELECT COUNT(*) FROM tasks WHERE status NOT IN ('—É–¥–∞–ª–µ–Ω–æ','–∏—Å–ø–æ–ª–Ω–µ–Ω–æ') AND user_id IS NULL", (executor_filter,))
        else:
            cursor.execute("SELECT COUNT(*) FROM tasks WHERE status NOT IN ('—É–¥–∞–ª–µ–Ω–æ','–∏—Å–ø–æ–ª–Ω–µ–Ω–æ') AND user_id = ?", (executor_filter,))
        total_tasks = cursor.fetchone()[0]
        
        if total_tasks == 0:
            return await bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        
        total_pages = (total_tasks - 1) // 10
        page = max(0, min(page, total_pages))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
        if executor_filter:
            if executor_filter.lower() == "none":
                cursor.execute("""
                    SELECT id, user_id, task_text, status, deadline 
                    FROM tasks 
                    WHERE status NOT IN ('—É–¥–∞–ª–µ–Ω–æ','–∏—Å–ø–æ–ª–Ω–µ–Ω–æ') AND user_id IS NULL
                    ORDER BY id DESC 
                    LIMIT 10 OFFSET ?
                """, (page * 10,))
            else:
                cursor.execute("""
                    SELECT id, user_id, task_text, status, deadline 
                    FROM tasks 
                    WHERE status NOT IN ('—É–¥–∞–ª–µ–Ω–æ','–∏—Å–ø–æ–ª–Ω–µ–Ω–æ') AND user_id = ?
                    ORDER BY id DESC 
                    LIMIT 10 OFFSET ?
                """, (executor_filter, page * 10))
        else:
            cursor.execute("""
                SELECT id, user_id, task_text, status, deadline 
                FROM tasks 
                WHERE status NOT IN ('—É–¥–∞–ª–µ–Ω–æ','–∏—Å–ø–æ–ª–Ω–µ–Ω–æ')
                ORDER BY id DESC 
                LIMIT 10 OFFSET ?
            """, (page * 10,))
        tasks = cursor.fetchall()

        result = []
        for task in tasks:
            task_id, task_user, task_text, status, deadline = task
            result.append(
                f"üîπ ID: {task_id} üë§: {task_user}\n"
                f"üìù: {task_text}\n"
                f"üîÑ: {status} ‚è≥: {deadline if deadline else '–Ω–µ—Ç —Å—Ä–æ–∫–∞'}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )
        keyboard = InlineKeyboardMarkup(row_width=3)
        buttons = []
        if page > 0:
            buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tasks_prev_{page-1}"))
        buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages+1}", callback_data="tasks_page"))
        if page < total_pages:
            buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"tasks_next_{page+1}"))
        keyboard.row(*buttons)
        
        header = f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {total_pages+1})"
        if executor_filter:
            header = f"üìã –ó–∞–¥–∞—á–∏ –¥–ª—è <b>{executor_filter}</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {total_pages+1})"
        
        sent_message = await bot.send_message(
            chat_id=message.chat.id,
            text=header + ":\n\n" + "\n".join(result),
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        return sent_message
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á: {str(e)}")
        await bot.send_message(message.from_user.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
        return None

@dp.callback_query_handler(lambda c: c.data.startswith(("tasks_prev_", "tasks_next_")))
async def process_tasks_pagination(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
    try:
        user_id = callback_query.from_user.id
        action, page = callback_query.data.split("_")[1:3]
        page = int(page)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        current_page[user_id] = page
        
        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ callback_query
        chat_id = callback_query.message.chat.id
        
        # –°–æ–∑–¥–∞–µ–º fake message object –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ show_tasks_page
        class FakeMessage:
            def __init__(self, chat_id):
                self.chat = type('Chat', (), {'id': chat_id})()
                self.from_user = type('User', (), {'id': user_id})()
        
        fake_message = FakeMessage(chat_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        sent_message = await show_tasks_page(fake_message, user_id, page)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            prev_message_id = current_page.get(f"{user_id}_message_id")
            if prev_message_id:
                await bot.delete_message(chat_id=chat_id, message_id=prev_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if sent_message:
            current_page[f"{user_id}_message_id"] = sent_message.message_id
        
        await bot.answer_callback_query(callback_query.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: {str(e)}")
        try:
            await bot.send_message(chat_id=callback_query.from_user.id, text="‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü.")
        except:
            pass

# ======================
# –≠–ö–°–ü–û–†–¢ –ó–ê–î–ê–ß –í CSV
# ======================

@dp.message_handler(lambda message: message.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á")
async def export_tasks_to_csv(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return  
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ CSV —Ñ–∞–π–ª —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π win1251"""
    try:
        cursor = conn.cursor()
        cursor.execute(""" SELECT id, 
                              user_id as "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", 
                              task_text as "–ó–∞–¥–∞—á–∞", 
                              status as "–°—Ç–∞—Ç—É—Å", 
                              deadline as "–°—Ä–æ–∫"
                        FROM tasks
                        WHERE status NOT IN ('—É–¥–∞–ª–µ–Ω–æ','–∏—Å–ø–æ–ª–Ω–µ–Ω–æ')
                        ORDER BY id DESC""")
        tasks = cursor.fetchall()
        
        if not tasks:
            await bot.send_message(chat_id=message.from_user.id, text="üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return

        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TextIOWrapper —Å –Ω—É–∂–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        text_buffer = io.TextIOWrapper(
            output,
            encoding='utf-8-sig',
            errors='replace',  # –∑–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ–¥–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            newline=''
        )
        
        writer = csv.writer(
            text_buffer,
            delimiter=';',  # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            quoting=csv.QUOTE_MINIMAL
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = ['ID', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–ó–∞–¥–∞—á–∞', '–°—Ç–∞—Ç—É—Å', '–°—Ä–æ–∫']
        writer.writerow(headers)
        
        # –î–∞–Ω–Ω—ã–µ
        for task in tasks:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏
            row = [
                str(item) if item is not None else ''
                for item in task
            ]
            writer.writerow(row)
        
        # –í–∞–∂–Ω–æ: –∑–∞–∫—Ä—ã—Ç—å TextIOWrapper –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—É—Ñ–µ—Ä–∞
        text_buffer.flush()
        text_buffer.detach()  # –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º TextIOWrapper –æ—Ç BytesIO
        output.seek(0)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        csv_file = InputFile(output, filename="tasks_export.csv")
        
        await message.reply_document(
            document=csv_file
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á: {str(e)}", exc_info=True)
        await bot.send_message(chat_id=message.from_user.id,text=f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

# ======================
# –≠–ö–°–ü–û–†–¢ –ó–ê–î–ê–ß –í CSV
# ======================

@dp.message_handler(lambda message: message.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç (—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏)")
async def export_tasks_to_csv2(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return  
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ CSV —Ñ–∞–π–ª —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π win1251"""
    try:
        cursor = conn.cursor()
        cursor.execute(""" SELECT id, 
                              user_id as "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", 
                              task_text as "–ó–∞–¥–∞—á–∞", 
                              status as "–°—Ç–∞—Ç—É—Å", 
                              deadline as "–°—Ä–æ–∫"
                        FROM tasks
                        WHERE status NOT IN ('—É–¥–∞–ª–µ–Ω–æ')
                        ORDER BY id DESC""")
        tasks = cursor.fetchall()
        
        if not tasks:
            await bot.send_message(chat_id=message.from_user.id, text="üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return

        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TextIOWrapper —Å –Ω—É–∂–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        text_buffer = io.TextIOWrapper(
            output,
            encoding='utf-8-sig',
            errors='replace',  # –∑–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ–¥–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            newline=''
        )
        
        writer = csv.writer(
            text_buffer,
            delimiter=';',  # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            quoting=csv.QUOTE_MINIMAL
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = ['ID', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–ó–∞–¥–∞—á–∞', '–°—Ç–∞—Ç—É—Å', '–°—Ä–æ–∫']
        writer.writerow(headers)
        
        # –î–∞–Ω–Ω—ã–µ
        for task in tasks:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏
            row = [
                str(item) if item is not None else ''
                for item in task
            ]
            writer.writerow(row)
        
        # –í–∞–∂–Ω–æ: –∑–∞–∫—Ä—ã—Ç—å TextIOWrapper –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—É—Ñ–µ—Ä–∞
        text_buffer.flush()
        text_buffer.detach()  # –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º TextIOWrapper –æ—Ç BytesIO
        output.seek(0)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        csv_file = InputFile(output, filename="tasks_export.csv")
        
        await message.reply_document(
            document=csv_file
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á: {str(e)}", exc_info=True)
        await bot.send_message(chat_id=message.from_user.id,text=f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

# ======================
# –≠–ö–°–ü–û–†–¢ –ó–ê–î–ê–ß –í CSV (—Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏)
# ======================

@dp.message_handler(commands=["export3"])
async def export_tasks_to_csv3(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç")
        return
      
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ CSV —Ñ–∞–π–ª —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π win1251"""
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM tasks ORDER BY id DESC")
        tasks = cursor.fetchall()
        
        if not tasks:
            await bot.send_message(chat_id=message.from_user.id, text="üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return

        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TextIOWrapper —Å –Ω—É–∂–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        text_buffer = io.TextIOWrapper(
            output,
            encoding='utf-8-sig',
            errors='replace',  # –∑–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ–¥–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            newline=''
        )
        
        writer = csv.writer(
            text_buffer,
            delimiter=';',  # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            quoting=csv.QUOTE_MINIMAL
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = ['ID', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', 'ID —Å–æ–∑–¥–∞—Ç–µ–ª—è', '–ó–∞–¥–∞—á–∞', '–°—Ç–∞—Ç—É—Å', '–°—Ä–æ–∫']
        writer.writerow(headers)
        
        # –î–∞–Ω–Ω—ã–µ
        for task in tasks:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏
            row = [
                str(item) if item is not None else ''
                for item in task
            ]
            writer.writerow(row)
        
        # –í–∞–∂–Ω–æ: –∑–∞–∫—Ä—ã—Ç—å TextIOWrapper –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—É—Ñ–µ—Ä–∞
        text_buffer.flush()
        text_buffer.detach()  # –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º TextIOWrapper –æ—Ç BytesIO
        output.seek(0)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        csv_file = InputFile(output, filename="tasks_export.csv")
        
        await message.reply_document(
            document=csv_file
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á: {str(e)}", exc_info=True)
        await bot.send_message(chat_id=message.from_user.id,text=f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

# ======================
# –£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ß
# ======================

@dp.message_handler(commands=["deletetask"])
async def delete_task_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏")
        return

    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, task_text, status 
            FROM tasks
            ORDER BY id DESC 
            LIMIT 5
        """)
        tasks = cursor.fetchall()

        if not tasks:
            await bot.send_message(chat_id=message.from_user.id, text="üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        keyboard = InlineKeyboardMarkup(row_width=1)
        for task_id, task_text, status in tasks:
            keyboard.add(InlineKeyboardButton(
                f"{task_text[:30]}... (ID: {task_id}, —Å—Ç–∞—Ç—É—Å: {status})", 
                callback_data=f"delete_task_{task_id}"
            ))
        
        keyboard.add(InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é", callback_data="enter_task_id_manually_delete"))

        await bot.send_message(chat_id=message.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID –≤—Ä—É—á–Ω—É—é:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await bot.send_message(chat_id=message.from_user.id, text="‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")

@dp.callback_query_handler(lambda c: c.data == "enter_task_id_manually_delete")
async def ask_for_manual_task_id_delete(callback_query: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(chat_id=callback_query.from_user.id, text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await TaskDeletion.waiting_for_manual_id.set()

@dp.message_handler(state=TaskDeletion.waiting_for_manual_id)
async def process_manual_task_id_delete(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        task_id = int(message.text)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM tasks WHERE id=?", (task_id,))
        if not cursor.fetchone():
            await bot.send_message(chat_id=message.from_user.id, text="‚ö† –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!")
            await state.finish()
            return
        
        await state.update_data(task_id=task_id)
        await show_delete_confirmation(message, task_id)
    except ValueError:
        await bot.send_message(chat_id=message.from_user.id, text="‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–¥–∞—á–∏!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID: {e}")
        await bot.send_message(chat_id=message.from_user.id, text="‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("delete_task_"))
async def select_task_for_deletion(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    task_id = callback_query.data.split("_")[2]
    await bot.answer_callback_query(callback_query.id)
    await show_delete_confirmation(callback_query.message, task_id)

async def show_delete_confirmation(message_obj, task_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    cursor = conn.cursor()
    cursor.execute("SELECT task_text, status, deadline FROM tasks WHERE id=?", (task_id,))
    task_info = cursor.fetchone()
    
    if not task_info:
        await bot.send_message(chat_id=message_obj.from_user.id, text="‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    task_text, status, deadline = task_info
    
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_deletion_{task_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_deletion")
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await bot.send_message(chat_id=message_obj.chat.id, text=
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?\n\n"
        f"üìå {task_text}\n"
        f"üîÑ {status}\n"
        f"‚è≥ {deadline if deadline else '–Ω–µ—Ç —Å—Ä–æ–∫–∞'}",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_deletion_"))
async def execute_task_deletion(callback_query: types.CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        task_id = callback_query.data.split("_")[2]
        
        cursor = conn.cursor()
        cursor.execute("SELECT task_text FROM tasks WHERE id=?", (task_id,))
        task = cursor.fetchone()
        
        if not task:
            await bot.send_message(chat_id=callback_query.chat.id, text="‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
            
        task_text = task[0]
        
        cursor.execute("DELETE FROM tasks WHERE id=?", (task_id,))
        conn.commit()
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await callback_query.message.edit_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:\n"
            f"ID: {task_id}\n"
            f"–¢–µ–∫—Å—Ç: {task_text[:100]}..."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await bot.send_message(chat_id=callback_query.from_user.id, text="‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!")

@dp.callback_query_handler(lambda c: c.data == "cancel_deletion")
async def cancel_task_deletion(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# ======================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ======================

class AddUserState(StatesGroup):
    waiting_for_user_id = State()  # –û–∂–∏–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.message_handler(commands=["adduser"])
async def add_user_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await bot.send_message(chat_id=message.from_user.id, text="‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await AddUserState.waiting_for_user_id.set()
    await bot.send_message(chat_id=message.from_user.id, text="‚è≥ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö:")

@dp.message_handler(state=AddUserState.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    user_id = message.text.strip()

    if not user_id.isdigit():
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    cursor = conn.cursor()
    user_id = int(user_id)

    try:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('INSERT INTO users (tg_user_id) VALUES (?)', (user_id,))
        conn.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        update_allowed_users(conn)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö!")
        
    except sqlite3.Error as e:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    # –¢–µ–ø–µ—Ä—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV —Ñ–∞–π–ª
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT tg_user_id FROM users")
        users = cursor.fetchall()

        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TextIOWrapper —Å –Ω—É–∂–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        text_buffer = io.TextIOWrapper(
            output,
            encoding='utf-8-sig',
            errors='replace',  # –∑–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ–¥–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            newline=''
        )

        writer = csv.writer(
            text_buffer,
            delimiter=';',  # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            quoting=csv.QUOTE_MINIMAL
        )

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = ['tg_user ID']
        writer.writerow(headers)

        # –î–∞–Ω–Ω—ã–µ
        for user in users:
            row = [str(user[0]) if user[0] is not None else '']
            writer.writerow(row)

        # –í–∞–∂–Ω–æ: –∑–∞–∫—Ä—ã—Ç—å TextIOWrapper –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—É—Ñ–µ—Ä–∞
        text_buffer.flush()
        text_buffer.detach()
        output.seek(0)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        csv_file = InputFile(output, filename="users_export.csv")

        await message.reply_document(
            document=csv_file
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}", exc_info=True)
        await bot.send_message(chat_id=message.from_user.id, text=f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
    await state.finish()

# ======================
# ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ======================

@dp.message_handler(commands=["myid"])
async def get_user_id(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,text=f"üÜî –í–∞—à ID: `{message.from_user.id}`", parse_mode="Markdown")

# ======================
# –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò
# ======================

async def check_deadlines():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞—Ç–µ–ª—é"""
    while True:
        try:
            now = datetime.now().strftime("%Y-%m-%d")
            cursor = conn.cursor()
            cursor.execute(
                "SELECT id, chat_id, task_text, user_id, status, deadline FROM tasks "
                "WHERE deadline<=? AND status NOT IN ('–∏—Å–ø–æ–ª–Ω–µ–Ω–æ','—É–¥–∞–ª–µ–Ω–æ')", 
                (now,)
            )
            tasks = cursor.fetchall()

            for task_id, chat_id, task_text, user_id, status, deadline in tasks:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–° —Å–æ–∑–¥–∞—Ç–µ–ª—è (chat_id == user_id)
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ üîπ{task_id}:\nüìù: {task_text}\n\nüë§: {user_id}\nüîÑ: {status} ‚è≥: {deadline}"
                    )
                except exceptions.BotBlocked:
                    logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                except exceptions.ChatNotFound:
                    logger.error(f"–ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞: {e}")

            await asyncio.sleep(21600)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
            await asyncio.sleep(60)

# ======================
# HEALTH CHECK
# ======================

async def health_check(request):
    """Endpoint –¥–ª—è health check"""
    return web.Response(text="OK")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check"""
    app = web.Application()
    app.router.add_get('/health', health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8000)
    await site.start()

# ======================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ======================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await set_bot_commands(bot)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram
    asyncio.create_task(check_deadlines())
    await asyncio.gather(
        start_web_server(),
        dp.start_polling()
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        conn.close()
