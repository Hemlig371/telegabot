import sqlite3
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from datetime import datetime, timedelta
import os
from aiohttp import web
import re
from aiogram.types import BotCommand
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = os.getenv('apibotkey')

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "/bd1/tasks.db"
conn = sqlite3.connect(DB_PATH, check_same_thread=False)

cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS tasks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id TEXT,
                    task_text TEXT,
                    status TEXT DEFAULT '–Ω–æ–≤–∞—è',
                    deadline TEXT)''')
conn.commit()

# –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

menu_keyboard.add(
    KeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"),
    KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
)

menu_keyboard.add(
    KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"),
    KeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
dp = Dispatcher(bot, storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class TaskCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_executor = State()
    waiting_for_deadline = State()

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.message_handler(lambda message: message.text == "‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
async def new_task_start(message: types.Message):
    await message.reply("üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await TaskCreation.waiting_for_title.set()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
@dp.message_handler(state=TaskCreation.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.reply("üë§ –í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (@username):")
    await TaskCreation.waiting_for_executor.set()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@dp.message_handler(state=TaskCreation.waiting_for_executor)
async def process_executor(message: types.Message, state: FSMContext):
    executor = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    if not re.match(r"^@\w+$", executor):
        await message.reply("‚ö† –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username\n–ü—Ä–∏–º–µ—Ä: @example_user")
        return

    await state.update_data(executor=executor)
    await message.reply("‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (YYYY-MM-DD):")
    await TaskCreation.waiting_for_deadline.set()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
@dp.message_handler(state=TaskCreation.waiting_for_deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    task_text = user_data['title']
    executor = user_data['executor']
    deadline = message.text.strip()

    try:
        cursor.execute("INSERT INTO tasks (chat_id, user_id, task_text, deadline) VALUES (?, ?, ?, ?)",
                       (message.chat.id, executor, task_text, deadline))
        conn.commit()

        await message.reply(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                            f"üìå <b>{task_text}</b>\n"
                            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor}\n"
                            f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {deadline}",
                            parse_mode=ParseMode.HTML)
    except sqlite3.Error as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    await state.finish()

@dp.message_handler(lambda message: message.text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def status_select_task(message: types.Message):
    cursor.execute("SELECT id, task_text FROM tasks WHERE chat_id=?", (message.chat.id,))
    tasks = cursor.fetchall()
    
    if not tasks:
        await message.reply("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    keyboard = InlineKeyboardMarkup()
    for task in tasks:
        keyboard.add(InlineKeyboardButton(f"üìå {task[1]} (ID: {task[0]})", callback_data=f"change_status_{task[0]}"))
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("change_status_"))
async def select_new_status(callback_query: types.CallbackQuery):
    task_id = callback_query.data.split("_")[2]

    keyboard = InlineKeyboardMarkup(row_width=2)
    statuses = ["–Ω–æ–≤–∞—è", "–≤ —Ä–∞–±–æ—Ç–µ", "–∏—Å–ø–æ–ª–Ω–µ–Ω–æ"]
    
    for status in statuses:
        keyboard.add(InlineKeyboardButton(status, callback_data=f"set_status_{task_id}_{status}"))

    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("set_status_"))
async def set_status(callback_query: types.CallbackQuery):
    _, task_id, new_status = callback_query.data.split("_")

    cursor.execute("UPDATE tasks SET status=? WHERE id=?", (new_status, task_id))
    conn.commit()

    await bot.send_message(callback_query.from_user.id, f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {new_status}")


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=menu_keyboard)

@dp.message_handler(commands=["n"])
async def new_task(message: types.Message):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
        match = re.match(r"^/n -([\w\s\d.,!?]+) @([\w\d_]+) -([\d-]+)$", message.text)

        if not match:
            await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: -–æ–ø–∏—Å–∞–Ω–∏–µ @–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å -—Å—Ä–æ–∫")
            return

        task_text, user_id, deadline = match.groups()

        cursor.execute("INSERT INTO tasks (chat_id, user_id, task_text, deadline) VALUES (?, ?, ?, ?)",
                       (message.chat.id, user_id, task_text.strip(), deadline.strip()))
        conn.commit()

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")

@dp.message_handler(commands=["s"])
async def change_status(message: types.Message):
    match = re.match(r"^/s (\d+) -([\w\s]+)$", message.text.strip())

    if not match:
        await message.reply("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /status ID -–Ω–æ–≤—ã–π_—Å—Ç–∞—Ç—É—Å\n–ù–∞–ø—Ä–∏–º–µ—Ä: /status 123 -–≤ —Ä–∞–±–æ—Ç–µ")
        return

    task_id, new_status = match.groups()

    cursor.execute("UPDATE tasks SET status=? WHERE id=?", (new_status.strip(), task_id))
    conn.commit()

    await message.reply(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ '{new_status.strip()}'")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á
@dp.message_handler(commands=["t"])
async def list_tasks(message: types.Message):
    cursor.execute("SELECT id, user_id, task_text, status, deadline FROM tasks")
    tasks = cursor.fetchall()
    if not tasks:
        await message.reply("–ó–∞–¥–∞—á –Ω–µ—Ç")
        return
    result = "\n".join([f"[{t[0]}] @{t[1]}: {t[2]} (–°—Ç–∞—Ç—É—Å: {t[3]}, –î–µ–¥–ª–∞–π–Ω: {t[4]})" for t in tasks])
    await message.reply(result)

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    help_text = (
        "üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/n -–æ–ø–∏—Å–∞–Ω–∏–µ @–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å -–¥–µ–¥–ª–∞–π–Ω - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "/s ID -—Å—Ç–∞—Ç—É—Å - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏\n"
        "/t - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    await message.reply(help_text)
  
# –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö
async def check_deadlines():
    while True:
        now = datetime.now().strftime("%Y-%m-%d")
        cursor.execute("SELECT id, chat_id, task_text FROM tasks WHERE deadline=? AND status != '–∏—Å–ø–æ–ª–Ω–µ–Ω–æ'", (now,))
        tasks = cursor.fetchall()
        for task in tasks:
            await bot.send_message(task[1], f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ {task[0]}: {task[2]}")
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å

# Health check –¥–ª—è Koyeb
async def health_check(request):
    return web.Response(text="OK")

async def start_web_server():
    app = web.Application()
    app.router.add_get('/health', health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8000)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8000
    await site.start()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –∏ –±–æ—Ç–∞, –∏ —Å–µ—Ä–≤–µ—Ä
async def main():
    asyncio.create_task(check_deadlines())  # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await asyncio.gather(
        start_web_server(),  # HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
        dp.start_polling()   # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    )

if __name__ == "__main__":
    asyncio.run(main())
