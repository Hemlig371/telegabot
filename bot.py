import sqlite3
import asyncio
import logging
import os
import re
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import (ParseMode, BotCommand, ReplyKeyboardMarkup, 
                          KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiohttp import web

import csv
import io
from aiogram.types import InputFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('apibotkey')
DB_PATH = "/bd1/tasks.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS tasks (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        chat_id INTEGER,
                        task_text TEXT,
                        status TEXT DEFAULT '–Ω–æ–≤–∞—è',
                        deadline TEXT)''')
        conn.commit()
        return conn
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

conn = init_db()

# ======================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –ò –ò–ù–¢–ï–†–§–ï–ô–°
# ======================

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
menu_keyboard.add(
    KeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"),
    KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
    KeyboardButton("‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫"),
    KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"),
    KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á"),
    KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def get_deadline_keyboard(with_none_option=False):
    today = datetime.today()
    dates = {
        "–°–µ–≥–æ–¥–Ω—è": today.strftime("%Y-%m-%d"),
        "–ó–∞–≤—Ç—Ä–∞": (today + timedelta(days=1)).strftime("%Y-%m-%d"),
        "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": (today + timedelta(days=2)).strftime("%Y-%m-%d"),
    }

    keyboard = InlineKeyboardMarkup(row_width=1)
    for label, date in dates.items():
        keyboard.add(InlineKeyboardButton(label, callback_data=f"set_deadline_{date}"))
    
    if with_none_option:
        keyboard.add(InlineKeyboardButton("‚ùå –ë–µ–∑ —Å—Ä–æ–∫–∞", callback_data="set_deadline_none"))
    
    keyboard.add(InlineKeyboardButton("–°–≤–æ–π —Å—Ä–æ–∫", callback_data="set_deadline_custom"))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
def get_status_keyboard(task_id):
    keyboard = InlineKeyboardMarkup(row_width=2)
    statuses = ["–Ω–æ–≤–∞—è", "–≤ —Ä–∞–±–æ—Ç–µ", "–æ–∂–∏–¥–∞–µ—Ç –¥–æ–∫–ª–∞–¥–∞", "–∏—Å–ø–æ–ª–Ω–µ–Ω–æ"]
    buttons = [InlineKeyboardButton(status, callback_data=f"set_status_{task_id}_{status}") for status in statuses]
    keyboard.add(*buttons)
    return keyboard

# ======================
# –°–û–°–¢–û–Ø–ù–ò–Ø –ë–û–¢–ê
# ======================

class TaskCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_executor = State()
    waiting_for_deadline = State()

class TaskDeletion(StatesGroup):
    waiting_for_task_selection = State()
    waiting_for_confirmation = State()
    waiting_for_manual_id = State()

# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ======================

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=menu_keyboard
    )

# ======================
# –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß
# ======================

@dp.message_handler(lambda message: message.text == "‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
async def new_task_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é"""
    await message.reply("üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await TaskCreation.waiting_for_title.set()

@dp.message_handler(state=TaskCreation.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await state.update_data(title=message.text)
    await message.reply("üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (@username):")
    await TaskCreation.waiting_for_executor.set()

@dp.message_handler(state=TaskCreation.waiting_for_executor)
async def process_executor(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏"""
    executor = message.text.strip()

    if not re.match(r"^@\w+$", executor):
        await message.reply("‚ö† –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username\n–ü—Ä–∏–º–µ—Ä: @example_user")
        return

    await state.update_data(executor=executor)
    await message.reply(
        "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π (–º–æ–∂–Ω–æ –±–µ–∑ —Å—Ä–æ–∫–∞):",
        reply_markup=get_deadline_keyboard(with_none_option=True)
    )
    await TaskCreation.waiting_for_deadline.set()

@dp.callback_query_handler(lambda c: c.data.startswith("set_deadline_"), state=TaskCreation.waiting_for_deadline)
async def process_deadline(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
    if callback_query.data == "set_deadline_custom":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º callback_query –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(callback_query=callback_query)
        await callback_query.message.reply("‚è≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        return
    elif callback_query.data == "set_deadline_none":
        await save_task(callback_query, state, deadline=None)
    else:
        deadline = callback_query.data.split("_")[2]
        await save_task(callback_query, state, deadline)

@dp.message_handler(state=TaskCreation.waiting_for_deadline)
async def process_custom_deadline(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞"""
    try:
        datetime.strptime(message.text, "%Y-%m-%d")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π callback_query –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        callback_query = user_data.get('callback_query')
        
        if callback_query:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_query –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            await save_task(callback_query, state, message.text.strip())
        else:
            # –ï—Å–ª–∏ callback_query –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º message
            await save_task(message, state, message.text.strip())
            
    except ValueError:
        await message.reply("‚ö† –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.")

async def save_task(message_obj, state: FSMContext, deadline: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ë–î"""
    user_data = await state.get_data()
    task_text = user_data['title']
    executor = user_data['executor']

    try:
        # –ü–æ–ª—É—á–∞–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ message_obj
        if isinstance(message_obj, types.CallbackQuery):
            chat_id = message_obj.message.chat.id
        else:  # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (types.Message)
            chat_id = message_obj.chat.id

        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO tasks (user_id, chat_id, task_text, deadline) VALUES (?, ?, ?, ?)",
            (executor, chat_id, task_text, deadline)
        )
        conn.commit()

        response = (
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìå <b>{task_text}</b>\n"
            f"üë§ {executor}\n"
        )
        if deadline:
            response += f"‚è≥ {deadline}"
        else:
            response += "‚è≥ –ë–µ–∑ —Å—Ä–æ–∫–∞"
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ message_obj
        if isinstance(message_obj, types.CallbackQuery):
            await message_obj.message.reply(response, parse_mode=ParseMode.HTML)
        else:
            await message_obj.reply(response, parse_mode=ParseMode.HTML)
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        reply_target = message_obj.message if isinstance(message_obj, types.CallbackQuery) else message_obj
        await reply_target.reply(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
    finally:
        await state.finish()

# ======================
# –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê
# ======================

class StatusUpdate(StatesGroup):
    waiting_for_task_selection = State()  # –î–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
    waiting_for_status_choice = State()   # –î–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞

@dp.message_handler(lambda message: message.text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def status_select_task(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, task_text, status 
            FROM tasks
            ORDER BY id DESC 
            LIMIT 5
        """)
        tasks = cursor.fetchall()

        if not tasks:
            await message.reply("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
            return

        keyboard = InlineKeyboardMarkup(row_width=1)
        for task_id, task_text, status in tasks:
            keyboard.add(InlineKeyboardButton(
                f"{task_text[:30]}... (ID: {task_id}, —Ç–µ–∫—É—â–∏–π: {status})", 
                callback_data=f"status_task_{task_id}"
            ))
        
        keyboard.add(InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é", callback_data="status_manual_id"))

        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=keyboard)
        await StatusUpdate.waiting_for_task_selection.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        await message.reply("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")

@dp.callback_query_handler(lambda c: c.data.startswith("status_task_"), state=StatusUpdate.waiting_for_task_selection)
async def process_selected_task_status(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    task_id = callback_query.data.split("_")[2]
    await state.update_data(task_id=task_id)
    await show_status_options(callback_query.message)
    await show_status_options(callback_query.message, task_id)

@dp.callback_query_handler(lambda c: c.data == "status_manual_id", state=StatusUpdate.waiting_for_task_selection)
async def ask_for_manual_id_status(callback_query: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    await callback_query.message.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏:")
    await StatusUpdate.waiting_for_task_selection.set()

@dp.message_handler(state=StatusUpdate.waiting_for_task_selection)
async def process_manual_task_id_status(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        task_id = int(message.text)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM tasks WHERE id=?", (task_id,))
        if not cursor.fetchone():
            await message.reply("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        await state.update_data(task_id=task_id)
        await show_status_options(message)
        await StatusUpdate.waiting_for_status_choice.set()
    except ValueError:
        await message.reply("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–¥–∞—á–∏!")

async def show_status_options(message_obj, task_id):
    keyboard = InlineKeyboardMarkup(row_width=2)
    statuses = ["–Ω–æ–≤–∞—è", "–≤ —Ä–∞–±–æ—Ç–µ", "–æ–∂–∏–¥–∞–µ—Ç –¥–æ–∫–ª–∞–¥–∞", "–∏—Å–ø–æ–ª–Ω–µ–Ω–æ"]
    buttons = [InlineKeyboardButton(status, callback_data=f"set_status_{task_id}_{status}") for status in statuses]
    keyboard.add(*buttons)
    await message_obj.reply("üìå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("set_status_"), state=StatusUpdate.waiting_for_status_choice)
async def process_status_update(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        new_status = callback_query.data.split("_")[3]
        user_data = await state.get_data()
        task_id = user_data['task_id']
        
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET status=? WHERE id=?", (new_status, task_id))
        conn.commit()
        
        await callback_query.message.reply(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
        await state.finish()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback_query.message.reply("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        await state.finish()

# ======================
# –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–†–û–ö–ê
# ======================

class TaskUpdate(StatesGroup):
    waiting_for_task_selection = State()  # –î–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
    waiting_for_deadline_choice = State()  # –î–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ä–æ–∫–∞
    waiting_for_custom_deadline = State()  # –î–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é

@dp.message_handler(lambda message: message.text == "‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫")
async def deadline_select_task(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞"""
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, task_text, deadline 
            FROM tasks
            ORDER BY id DESC 
            LIMIT 5
        """)
        tasks = cursor.fetchall()

        if not tasks:
            await message.reply("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞.")
            return

        keyboard = InlineKeyboardMarkup(row_width=1)
        for task_id, task_text, deadline in tasks:
            keyboard.add(InlineKeyboardButton(
                f"{task_text[:30]}... (ID: {task_id}, –°—Ä–æ–∫: {deadline})", 
                callback_data=f"deadline_task_{task_id}"
            ))
        
        keyboard.add(InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é", callback_data="deadline_manual_id"))

        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞:", reply_markup=keyboard)
        await TaskUpdate.waiting_for_task_selection.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        await message.reply("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")

@dp.callback_query_handler(lambda c: c.data.startswith("deadline_task_"), state=TaskUpdate.waiting_for_task_selection)
async def process_selected_task(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    task_id = callback_query.data.split("_")[-1]
    await state.update_data(task_id=task_id)
    await show_deadline_options(callback_query.message)
    await TaskUpdate.waiting_for_deadline_choice.set()

@dp.callback_query_handler(lambda c: c.data == "deadline_manual_id", state=TaskUpdate.waiting_for_task_selection)
async def ask_for_manual_id(callback_query: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID"""
    await callback_query.message.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏:")
    await TaskUpdate.waiting_for_task_selection.set()

@dp.message_handler(state=TaskUpdate.waiting_for_task_selection)
async def process_manual_task_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏"""
    try:
        task_id = int(message.text)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM tasks WHERE id=?", (task_id,))
        if not cursor.fetchone():
            await message.reply("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        await state.update_data(task_id=task_id)
        await show_deadline_options(message)
        await TaskUpdate.waiting_for_deadline_choice.set()
    except ValueError:
        await message.reply("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–¥–∞—á–∏!")

async def show_deadline_options(message_obj):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞"""
    keyboard = get_deadline_keyboard(with_none_option=True)
    await message_obj.reply("‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("set_deadline_"), state=TaskUpdate.waiting_for_deadline_choice)
async def process_deadline_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ä–æ–∫–∞"""
    if callback_query.data == "set_deadline_custom":
        await callback_query.message.reply("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        await TaskUpdate.waiting_for_custom_deadline.set()
    else:
        user_data = await state.get_data()
        task_id = user_data['task_id']
        
        if callback_query.data == "set_deadline_none":
            new_deadline = None
            response = "‚úÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω"
        else:
            new_deadline = callback_query.data.split("_")[2]
            response = f"‚úÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫: {new_deadline}"
        
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET deadline=? WHERE id=?", (new_deadline, task_id))
        conn.commit()
        
        await callback_query.message.reply(response)
        await state.finish()

@dp.message_handler(state=TaskUpdate.waiting_for_custom_deadline)
async def process_custom_deadline(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        datetime.strptime(message.text, "%Y-%m-%d")
        new_deadline = message.text
        
        user_data = await state.get_data()
        task_id = user_data['task_id']
        
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET deadline=? WHERE id=?", (new_deadline, task_id))
        conn.commit()
        
        await message.reply(f"‚úÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_deadline}")
        await state.finish()
    except ValueError:
        await message.reply("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")

# ======================
# –°–ü–ò–°–û–ö –ó–ê–î–ê–ß
# ======================

current_page = {}

@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def list_tasks(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        user_id = message.from_user.id
        current_page[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = await show_tasks_page(message, user_id, page=0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        current_page[f"{user_id}_message_id"] = sent_message.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {str(e)}")
        await message.reply("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")

async def show_tasks_page(message: types.Message, user_id: int, page: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
        cursor.execute("SELECT COUNT(*) FROM tasks")
        total_tasks = cursor.fetchone()[0]
        
        if total_tasks == 0:
            return await bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (total_tasks - 1) // 5
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if page < 0:
            page = 0
        elif page > total_pages:
            page = total_pages
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        cursor.execute("""
            SELECT id, user_id, task_text, status, deadline 
            FROM tasks 
            ORDER BY id DESC 
            LIMIT 5 OFFSET ?
        """, (page * 5,))
        tasks = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = []
        for task in tasks:
            task_id, user_id, task_text, status, deadline = task
            result.append(
                f"üîπ ID: {task_id} üë§: {user_id}\n"
                f"üìù: {task_text}\n"
                f"üîÑ: {status} ‚è≥: {deadline if deadline else '–Ω–µ—Ç —Å—Ä–æ–∫–∞'}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(row_width=3)
        buttons = []
        if page > 0:
            buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tasks_prev_{page-1}"))
        
        buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages+1}", callback_data="tasks_page"))
        
        if page < total_pages:
            buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"tasks_next_{page+1}"))
        
        keyboard.row(*buttons)
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = await bot.send_message(
            chat_id=message.chat.id,
            text=f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {total_pages+1}):\n\n" + "\n".join(result),
            reply_markup=keyboard
        )
        return sent_message
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á: {str(e)}")
        await bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
        return None

@dp.callback_query_handler(lambda c: c.data.startswith(("tasks_prev_", "tasks_next_")))
async def process_tasks_pagination(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
    try:
        user_id = callback_query.from_user.id
        action, page = callback_query.data.split("_")[1:3]
        page = int(page)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        current_page[user_id] = page
        
        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ callback_query
        chat_id = callback_query.message.chat.id
        
        # –°–æ–∑–¥–∞–µ–º fake message object –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ show_tasks_page
        class FakeMessage:
            def __init__(self, chat_id):
                self.chat = type('Chat', (), {'id': chat_id})()
                self.from_user = type('User', (), {'id': user_id})()
        
        fake_message = FakeMessage(chat_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        sent_message = await show_tasks_page(fake_message, user_id, page)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            prev_message_id = current_page.get(f"{user_id}_message_id")
            if prev_message_id:
                await bot.delete_message(chat_id=chat_id, message_id=prev_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if sent_message:
            current_page[f"{user_id}_message_id"] = sent_message.message_id
        
        await bot.answer_callback_query(callback_query.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: {str(e)}")
        try:
            await callback_query.message.reply("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü.")
        except:
            pass

# ======================
# –≠–ö–°–ü–û–†–¢ –ó–ê–î–ê–ß –í CSV
# ======================

@dp.message_handler(lambda message: message.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á")
async def export_tasks_to_csv(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ CSV —Ñ–∞–π–ª —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π win1251"""
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM tasks ORDER BY id DESC")
        tasks = cursor.fetchall()
        
        if not tasks:
            await message.reply("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return

        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TextIOWrapper —Å –Ω—É–∂–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        text_buffer = io.TextIOWrapper(
            output,
            encoding='utf-8-sig',
            errors='replace',  # –∑–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ–¥–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            newline=''
        )
        
        writer = csv.writer(
            text_buffer,
            delimiter=';',  # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            quoting=csv.QUOTE_MINIMAL
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = ['ID', 'User ID', 'Chat ID', 'Task Text', 'Status', 'Deadline']
        writer.writerow(headers)
        
        # –î–∞–Ω–Ω—ã–µ
        for task in tasks:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏
            row = [
                str(item) if item is not None else ''
                for item in task
            ]
            writer.writerow(row)
        
        # –í–∞–∂–Ω–æ: –∑–∞–∫—Ä—ã—Ç—å TextIOWrapper –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—É—Ñ–µ—Ä–∞
        text_buffer.flush()
        text_buffer.detach()  # –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º TextIOWrapper –æ—Ç BytesIO
        output.seek(0)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        csv_file = InputFile(output, filename="tasks_export.csv")
        
        await message.reply_document(
            document=csv_file,
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ CSV"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á: {str(e)}", exc_info=True)
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

# ======================
# –£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ß
# ======================

@dp.message_handler(lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_task_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á"""
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, task_text, status 
            FROM tasks
            ORDER BY id DESC 
            LIMIT 5
        """)
        tasks = cursor.fetchall()

        if not tasks:
            await message.reply("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        keyboard = InlineKeyboardMarkup(row_width=1)
        for task_id, task_text, status in tasks:
            keyboard.add(InlineKeyboardButton(
                f"{task_text[:30]}... (ID: {task_id}, —Å—Ç–∞—Ç—É—Å: {status})", 
                callback_data=f"delete_task_{task_id}"
            ))
        
        keyboard.add(InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é", callback_data="enter_task_id_manually_delete"))

        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID –≤—Ä—É—á–Ω—É—é:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await message.reply("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")

@dp.callback_query_handler(lambda c: c.data == "enter_task_id_manually_delete")
async def ask_for_manual_task_id_delete(callback_query: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await TaskDeletion.waiting_for_manual_id.set()

@dp.message_handler(state=TaskDeletion.waiting_for_manual_id)
async def process_manual_task_id_delete(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        task_id = int(message.text)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM tasks WHERE id=?", (task_id,))
        if not cursor.fetchone():
            await message.reply("‚ö† –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!")
            await state.finish()
            return
        
        await state.update_data(task_id=task_id)
        await show_delete_confirmation(message, task_id)
    except ValueError:
        await message.reply("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–¥–∞—á–∏!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID: {e}")
        await message.reply("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("delete_task_"))
async def select_task_for_deletion(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    task_id = callback_query.data.split("_")[2]
    await bot.answer_callback_query(callback_query.id)
    await show_delete_confirmation(callback_query.message, task_id)

async def show_delete_confirmation(message_obj, task_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    cursor = conn.cursor()
    cursor.execute("SELECT task_text, status, deadline FROM tasks WHERE id=?", (task_id,))
    task_info = cursor.fetchone()
    
    if not task_info:
        await message_obj.reply("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    task_text, status, deadline = task_info
    
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_deletion_{task_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_deletion")
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await message_obj.reply(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?\n\n"
        f"üìå {task_text}\n"
        f"üîÑ {status}\n"
        f"‚è≥ {deadline if deadline else '–Ω–µ—Ç —Å—Ä–æ–∫–∞'}",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_deletion_"))
async def execute_task_deletion(callback_query: types.CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        task_id = callback_query.data.split("_")[2]
        
        cursor = conn.cursor()
        cursor.execute("SELECT task_text FROM tasks WHERE id=?", (task_id,))
        task = cursor.fetchone()
        
        if not task:
            await callback_query.message.reply("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
            
        task_text = task[0]
        
        cursor.execute("DELETE FROM tasks WHERE id=?", (task_id,))
        conn.commit()
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await callback_query.message.edit_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:\n"
            f"ID: {task_id}\n"
            f"–¢–µ–∫—Å—Ç: {task_text[:100]}..."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await callback_query.message.reply("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!")

@dp.callback_query_handler(lambda c: c.data == "cancel_deletion")
async def cancel_task_deletion(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# ======================
# –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò
# ======================

async def check_deadlines():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            now = datetime.now().strftime("%Y-%m-%d")
            cursor = conn.cursor()
            cursor.execute(
                "SELECT id, chat_id, task_text FROM tasks WHERE deadline=? AND status != '–∏—Å–ø–æ–ª–Ω–µ–Ω–æ'", 
                (now,)
            )
            tasks = cursor.fetchall()

            for task_id, chat_id, task_text in tasks:
                try:
                    await bot.send_message(
                        chat_id,
                        f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ {task_id}:\n{task_text}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

            await asyncio.sleep(10800)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ 3 —á–∞—Å–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}")
            await asyncio.sleep(60)

# ======================
# HEALTH CHECK
# ======================

async def health_check(request):
    """Endpoint –¥–ª—è health check"""
    return web.Response(text="OK")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check"""
    app = web.Application()
    app.router.add_get('/health', health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8000)
    await site.start()

# ======================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ======================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    asyncio.create_task(check_deadlines())
    await asyncio.gather(
        start_web_server(),
        dp.start_polling()
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        conn.close()
